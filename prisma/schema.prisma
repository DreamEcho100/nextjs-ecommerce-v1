// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// npx prisma init
// This command will create a prisma folder inside prisma-next project and a 
// .env file. The prisma folder will contain a schema.prisma file, this is 
// where we declare our Prisma database models. Next, we set up the Prisma 
// connections to our Postgres DB.

// npx prisma migrate dev --name init
// This command will generate the migrations file and run them against your 
// db. The --name sub-arg sets the name of the migration. The value which is init 
// will be the name of the migrations folder generated. The output is: 
// {NUMBER_GENERATED_BY_PRISMA}_init. So this will generate a folder/file inside 
// the prisma/migrations folder. A new folder with a migration.sql SQL file will 
// be generated for each migration run.

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  role                  Role                   @default(USER)
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime               @default(now())
  accounts              Account[]
  sessions              Session[]
  profile               Profile?
  shippingAddress       ShippingAddress[]
}

model Profile {
  id                    Int                    @id @default(autoincrement())
  bio                   String?
  sex                   String
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String                 @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now())
}

model ShippingAddress {
  id                           String    @id @default(cuid())
	country                      String
	city                         String
	address                      String
	postalCode                   String
  createdAt                    DateTime  @default(now())
  user                         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                       String
  orderShippingAddress         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id           String             @id @default(cuid())
  src          String
  alt          String?
  categories   ImagesOnCategory[]
  products     ImagesOnProduct[]
}

model Product {
  id               String        @id @default(cuid())
  title            String
  // name             String
  price            Float
  // image            String
  brand            String
  description      String
  status           String?
  countInStock     Int
  // currentInventory Int
  // authenticity        Int?
  // returnPolicy        Int?
  // warranty       Int?
	// rating: number;
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // categories       Category[]  // @relation(references: [id])
  categories        CategoriesOnProducts[]
  orders            ProductsOnOrder[]
  images            ImagesOnProduct[]
}

model ImagesOnProduct {
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId       String
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  createdAt     DateTime    @default(now())

  @@id([imageId, productId])
}

model Category {
  id            String        @id @default(cuid())
  name          String
  createdAt     DateTime    @default(now())
  products      CategoriesOnProducts[]
  images        ImagesOnCategory[]
}

model ImagesOnCategory {
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId       String
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  createdAt     DateTime    @default(now())

  @@id([imageId, categoryId])
}

model CategoriesOnProducts {
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String
  createdAt     DateTime    @default(now())

  @@id([productId, categoryId])
}

model Order {
  id                    String              @id @default(cuid())
	itemsPrice            Float
	taxPrice              Float
	shippingPrice         Float
	createdAt             DateTime            @default(now())
	paidAt                DateTime?
	deliveredAt           DateTime?
	paymentMethod         String
  products              ProductsOnOrder[]
  shippingAddress       ShippingAddress      @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId     String
  paymentResult         PaymentResult?
}

model PaymentResult {
  id                    String              @id @default(cuid())
	status                String
	updateAt              String
	email                 String
  order                 Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               String              @unique
}

model ProductsOnOrder {
	quantity         Int
	pricePerProduct  Float
  createdAt        DateTime      @default(now())
  product          Product       @relation(fields: [productId], references: [id])
  productId        String
  order            Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String

  @@id([productId, orderId])
}
